// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static Array twoToThe;   // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static int divisionTemp;

    // Initializes the Math library.
    function void init() {
        var int i, v;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        let v = 2;
        while (i < 16) {
            let twoToThe[i] = v;
            let v = v + v;
            let i = i + 1;
        }

        return;
    }
    
    function void getTwoToThe(int n) {
        return twoToThe[n];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (Math.bit(x, 15)) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, i;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + x;
            }
            let x = x + x;
            let i = i + 1;
        }

        return sum;
    }

    function boolean bit(int x, int j) {
        if ((x & twoToThe[j]) = 0) {
            return false;
        } else {
            return true;
        }
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int absX, absY;
        var boolean isXPlus, isYPlus;

        let absX = Math.abs(x);
        let absY = Math.abs(y);

        let isXPlus = (x = absX);
        let isYPlus = (y = absY);
        if ((isXPlus & isYPlus) | ~(isXPlus | isYPlus)) {
            // same sign
            return Math.naturalDivide(absX, absY);
        } else {
            // different sign
            return -Math.naturalDivide(absX, absY);
        }
    }

    function int naturalDivide(int x, int y) {
        var int q;

        if ((x < y) | ~(y > 0)) {
            let divisionTemp = 0;
            return 0;
        }

        let q = Math.naturalDivide(x, y + y);
        let q = q + q;
        if (x - divisionTemp < y) {
            return q;
        } else {
            let divisionTemp = divisionTemp + y;
            return q + 1;
        }
    }

    function int naturalRemainder(int x, int y) {
        do Math.naturalDivide(x, y);
        return x - divisionTemp;
    }

    /** Returns the smaller value. */
    function int min(int x, int y) {
        if (x > y) {
            return y;
        } else {
            return x;
        }
    }

    /** Returns the greater value. */
    function int max(int x, int y) {
        if (x > y) {
            return x;
        } else {
            return y;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, tmp, tmpSquared;

        let j = 7;
        while (j > -1) {
            let tmp = y + twoToThe[j];
            let tmpSquared = tmp * tmp;
            if ((tmpSquared - 1 < x) & (tmpSquared > 0)) {
                let y = tmp;
            } 

            let j = j - 1;
        }

        return y;
    }
}