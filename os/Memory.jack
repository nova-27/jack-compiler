// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heapBase; 

    /** Initializes the class. */
    function void init() {
        let heapBase = 2048;
        let heapBase[0] = 14336;
        let heapBase[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var Array cur_block, block;

        // 1 for length
        let size = size + 1;

        // find large enough block
        let cur_block = heapBase;
        while (~(cur_block = null)) {
            if ((cur_block[0] - 1) > size) {
                let block = cur_block;
                let cur_block = null;
            } else {
                let cur_block = cur_block[1];
            }
        }

        if (block = null) {
            do Sys.error();
        }

        let block[0] = block[0] - size;
        let block = block + block[0];
        
        let block[0] = size;
        return block + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array prev_block, next_block;

        let o = o - 1;
        let prev_block = heapBase;
        while ((prev_block[1] < o) & ~(prev_block[1] = null)) {
            let prev_block = prev_block[1];
        }

        let next_block = prev_block[1];
        if (prev_block + prev_block[0] = o) {
            // Merge with previous free block
            let prev_block[0] = prev_block[0] + o[0]; 
            let o = prev_block;
        } else {
            let prev_block[1] = o;
            let o[1] = next_block;
        }

        if (o + o[0] = next_block) {
            // Merge with next free block
            let o[1] = next_block[1];
            let o[0] = o[0] + next_block[0];
        }
        
        return;
    }
}