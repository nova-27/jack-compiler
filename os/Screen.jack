// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean _b;

    /** Initializes the Screen. */
    function void init() {
        let _b = false;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;

        let address = 16384;
        while (address < 24576) {
            do Memory.poke(address, _b);
            let address = address + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let _b = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, data, bitPos;

        let address = 16384 + (y * 32) + (x / 16);
        let data = Memory.peek(address);
        let bitPos = x & 15;

        if (_b) {
            let data = data | Math.getTwoToThe(bitPos);
        } else {
            let data = data & (true - Math.getTwoToThe(bitPos));
        }

        do Memory.poke(address, data);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx;
        var boolean neg;

        if (x1 > x2) {
            let a = x1;
            let b = y1;
            let x1 = x2;
            let y1 = y2;
            let x2 = a;
            let y2 = b;
        }

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (Math.bit(dy, 15)) {
            // slope is negative
            let neg = true;
            let dy = Math.abs(dy);
        }

        while ((a - 1 < dx) & (b - 1 < dy)) {
            if (neg) {
                do Screen.drawPixel(x1 + a, y1 - b);
            } else {
                do Screen.drawPixel(x1 + a, y1 + b);
            }

            if (adyMinusbdx > 0) {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            } else {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y;

        let y = y1;
        while (y - 1 < y2) {
            let x = x1;
            while (x - 1 < x2) {
                do Screen.drawPixel(x, y);
                let x = x + 1;
            }

            let y = y + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int a, b, rSquared, l;

        let rSquared = r * r;

        let b = -r;
        while (b - 1 < r) {
            let l = Math.sqrt(rSquared - (b * b));
            
            let a = -l;
            while (a - 1 < l) {
                do Screen.drawPixel(x + a, y + b);
                let a = a + 1;
            }

            let b = b + 1;
        }

        return;
    }
}